package willey.lib.physics.polymer.interactor;

import junit.framework.Assert;

import org.junit.Test;

import willey.lib.math.linearalgebra.CartesianVector;
import willey.lib.physics.polymer.interactor.Interactions.Type;
import willey.lib.test.AbstractTest;
import willey.lib.util.IterableUtil;
import willey.lib.util.Predicate;

public class PolymerTest extends AbstractTest
{

	@Test
	public void testSizeAndRadius()
	{
		int vSize = 20;
		double vRadius = 0.5;
		Polymer vPolymer = new Polymer(vSize, vRadius);
		int vCount = 0;
		CartesianVector vPosition = null;
		for (Monomer vMonomer : vPolymer)
		{
			Assert.assertEquals(vRadius, vMonomer.radius());
			if (vCount != 0)
			{
				double vDistance = vPosition.distance(vMonomer.position());
				assertEquals(vMonomer.radius()*2, vDistance, 0.0000001);
				vPosition = vMonomer.position();
			}
			vPosition = vMonomer.position();
			vCount++;
		}
		Assert.assertEquals(vSize, vCount);
		Assert.assertTrue(vPolymer.getRadius() <= vSize);
	}

	@Test
	public void chooseRandom()
	{
		int vSize = 20;
		double vRadius = 0.5;
		Polymer vPolymer = new Polymer(vSize, vRadius);
		for (int i = 0; i < 1000000; i++)
		{
			Assert.assertNotNull(vPolymer.chooseRandom());
		}
	}

	@Test
	public void testInteracts()
	{
		Monomer v1 = new TestMonomer(CartesianVector.vector(0, 0, 0), 0.5);
		Monomer v2 = new TestMonomer(CartesianVector.vector(0.5, 0, 0), 0.5);
		Assert.assertTrue(v1.interacts(v2));
		Assert.assertFalse(v1.interacts(new TestMonomer(CartesianVector.vector(
				2, 0, 0), 0.5)));
	}

	@Test
	public void testMove() throws Exception
	{
		int vSize = 8;
		double vRadius = 0.5;
		Polymer vPolymer = new Polymer(vSize, vRadius);
		System.out.println(vPolymer.getRadius());
		int vCount = 0;
		for (int i = 0; i < 1000; i++)
		{
			for (Monomer vMonomer : vPolymer)
			{
				Monomer vNew = vMonomer.randomTestableMove();
				vPolymer.replace(vMonomer, vNew);
				Assert.assertEquals(vSize, vPolymer.getLength());
				boolean vValidMove = IterableUtil.iterate(
						vPolymer.exclude(vMonomer).iterator(),
						new InteractionPredicate(vNew));
				if (!vValidMove)
				{
					vPolymer.replace(vNew, vMonomer);
				}
				else
				{
					vCount++;
				}
			}
		}
		System.out.println(vPolymer.getRadius());
		System.out.println(vCount);
	}

	private static class InteractionPredicate implements Predicate<Interactor>
	{
		private final Monomer mMonomer;

		InteractionPredicate(Monomer pMonomer)
		{
			mMonomer = pMonomer;
		}

		@Override
		public boolean apply(Interactor pArgument) throws Exception
		{
			return !mMonomer.interacts(pArgument);
		}
	}

	private static class TestMonomer implements Monomer
	{
		private final CartesianVector mPosition;
		private final double mRadius;

		private TestMonomer(CartesianVector pVector, double pRadius)
		{
			mPosition = pVector;
			mRadius = pRadius;
		}

		@Override
		public boolean interacts(Interactor pInteractor)
		{
			return Polymer.interacts(this, (Monomer) pInteractor);
		}

		@Override
		public Type getInteractionType()
		{
			return Interactions.Type.Monomer;
		}

		@Override
		public CartesianVector position()
		{
			return mPosition;
		}

		@Override
		public double radius()
		{
			return mRadius;
		}

		@Override
		public void setLeftNeighbor(Monomer pLeftNeighbor)
		{

		}

		@Override
		public void setRightNeighbor(Monomer pRightNeighbor)
		{

		}

		@Override
		public Monomer randomTestableMove()
		{
			return this;
		}

		@Override
		public Monomer reposition(CartesianVector pNewPosition)
		{
			return this;
		}

		@Override
		public void replace(Monomer pMonomer)
		{

		}

		@Override
		public Monomer rightNeighbor()
		{
			return null;
		}

		@Override
		public Monomer leftNeighbor()
		{
			return null;
		}

		@Override
		public boolean isNeighbor(Monomer pMonomer)
		{
			return false;
		}
	}
}
