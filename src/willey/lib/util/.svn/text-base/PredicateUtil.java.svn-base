package willey.lib.util;

public class PredicateUtil
{
	private PredicateUtil()
	{
	}

	public <T> boolean applyOr(T pArgument, Predicate<T> pFirst,
			Predicate<T>... pOther) throws Exception
	{
		boolean vReturn = pFirst.apply(pArgument);
		int vSize = pOther.length;
		for (int i = 0; i < vSize && !vReturn; i++)
		{
			vReturn = pOther[i].apply(pArgument);
		}
		return vReturn;
	}

	public <T> Predicate<T> or(Predicate<T> pFirst, Predicate<T> pSecond,
			Predicate<T>... pOther)
	{
		Predicate<T> vReturn = new OrPredicate<T>(pFirst, pSecond);
		for (Predicate<T> vPredicate : pOther)
		{
			vReturn = new OrPredicate<T>(vReturn, vPredicate);
		}
		return vReturn;
	}

	public <T> boolean and(T pArgument, Predicate<T> pFirst,
			Predicate<T>... pOther) throws Exception
	{
		boolean vReturn = pFirst.apply(pArgument);
		int vSize = pOther.length;
		for (int i = 0; i < vSize && vReturn; i++)
		{
			vReturn = pOther[i].apply(pArgument);
		}
		return vReturn;
	}

	public static <T> Predicate<T> and(Predicate<T> pFirst,
			Predicate<T>... pPredicates)
	{
		CombinePredicateInterface<T> vPredicate = new CombinablePredicate<T>(
				pFirst);
		for (Predicate<T> vPred : pPredicates)
		{
			vPredicate = vPredicate.andCombine(vPred);
		}
		return vPredicate;
	}

	public static <T> Predicate<T> or(Predicate<T> pFirst,
			Predicate<T>... pPredicates)
	{
		CombinePredicateInterface<T> vPredicate = new CombinablePredicate<T>(
				pFirst);
		for (Predicate<T> vPred : pPredicates)
		{
			vPredicate = vPredicate.orCombine(vPred);
		}
		return vPredicate;
	}

	public static <T> Predicate<T> not(Predicate<T> pPredicate)
	{
		return new NegatePredicate<T>(pPredicate);
	}

	private static class NegatePredicate<T> implements Predicate<T>
	{
		private final Predicate<T> mPredicate;

		private NegatePredicate(Predicate<T> pPredicate)
		{
			mPredicate = pPredicate;
		}

		public boolean apply(T pArgument) throws Exception
		{
			return !mPredicate.apply(pArgument);
		}
	}
	
	private interface CombinePredicateInterface<T> extends Predicate<T>
	{
		public CombinePredicateInterface<T> orCombine(Predicate<T> pPedicate);

		public CombinePredicateInterface<T> andCombine(Predicate<T> pPredicate);
	}

	private static class CombinablePredicate<T> implements
			CombinePredicateInterface<T>
	{
		private final Predicate<T> mPredicate;

		CombinablePredicate(Predicate<T> pPredicate)
		{
			mPredicate = pPredicate;
		}

		public boolean apply(T pArgument) throws Exception
		{
			return mPredicate.apply(pArgument);
		}

		public CombinePredicateInterface<T> andCombine(Predicate<T> pPredicate)
		{
			return new AndPredicate<T>(this, pPredicate);
		}

		public CombinePredicateInterface<T> orCombine(Predicate<T> pPredicate)
		{
			return new OrPredicate<T>(this, pPredicate);
		}
	}

	private static class AndPredicate<T> implements Predicate<T>,
			CombinePredicateInterface<T>
	{
		private final Predicate<T> mFirst;
		private final Predicate<T> mSecond;

		AndPredicate(Predicate<T> pFirst, Predicate<T> pSecond)
		{
			mFirst = pFirst;
			mSecond = pSecond;
		}

		public boolean apply(T pArgument) throws Exception
		{
			return mFirst.apply(pArgument) && mSecond.apply(pArgument);
		}

		public CombinePredicateInterface<T> andCombine(Predicate<T> pPredicate)
		{
			return new AndPredicate<T>(this, pPredicate);
		}

		public CombinePredicateInterface<T> orCombine(Predicate<T> pPredicate)
		{
			return new OrPredicate<T>(this, pPredicate);
		}
	}

	private static class OrPredicate<T> implements Predicate<T>,
			CombinePredicateInterface<T>
	{
		private final Predicate<T> mFirst;
		private final Predicate<T> mSecond;

		OrPredicate(Predicate<T> pFirst, Predicate<T> pSecond)
		{
			mFirst = pFirst;
			mSecond = pSecond;
		}

		public boolean apply(T pArgument) throws Exception
		{
			return mFirst.apply(pArgument) || mSecond.apply(pArgument);
		}

		public CombinePredicateInterface<T> andCombine(Predicate<T> pPredicate)
		{
			return new AndPredicate<T>(this, pPredicate);
		}

		public CombinePredicateInterface<T> orCombine(Predicate<T> pPredicate)
		{
			return new OrPredicate<T>(this, pPredicate);
		}
	}
}
