package willey.lib.util;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.util.Collection;
import java.util.Iterator;

public class IterableUtil
{
	private IterableUtil()
	{

	}

	public static Iterable<String> toIterable(File pFile) throws Exception
	{
		return new FileLineIterable(pFile);
	}

	public static <E> Iterable<E> toIterable(Supplier<E> pSupplier, int pLimit)
	{
		return new SupplierIterable<E>(pSupplier, pLimit);
	}

	public static <E> Iterator<E> toIterator(Supplier<E> pSupplier, int pLimit)
	{
		return new SupplierIterator<E>(pSupplier, pLimit);
	}

	public static <E> Iterable<E> toIterator(E pElement)
	{
		return new SingleIterator<E>(pElement);
	}

	/**
	 * Iterater over elements applying a predicate to each one. The method stops
	 * the first time the predicate returns false.
	 * 
	 * @param pIterator
	 * @param pPredicate
	 * @return true if all the elements of the iterator return true for the
	 *         predicate.
	 * @throws Exception
	 */
	public static <T> boolean iterate(Iterator<T> pIterator,
			Predicate<T> pPredicate) throws Exception
	{
		boolean vCompleted = true;
		while (vCompleted && pIterator.hasNext())
		{
			vCompleted = pPredicate.apply(pIterator.next());
		}
		return vCompleted;
	}

	public static <F, E> Iterator<F> applyNested(
			Iterator<? extends Function<E, F>> pIterator,
			NestableIterator<E> pFunctionIterator)
	{
		return new NestedApply<F, E>(pIterator, pFunctionIterator);
	}

	public static <E> NestableIterator<E> getNestableIterator(
			Collection<E> pCollection)
	{
		return new NestableIterator<E>(pCollection);
	}

	/**
	 * Apply a function to each element of an iterator.
	 * 
	 * @param pFunction
	 * @param pIterator
	 * @return an iterator in which calling next() calls
	 *         pFunction.apply(pIterator.next());
	 */
	public static <F, E> Iterator<E> iterateAndApply(Function<F, E> pFunction,
			Iterator<F> pIterator)
	{
		return new IteratorApply<F, E>(pFunction, pIterator);
	}

	public static <F, E> Iterable<E> applyAndGetIterable(
			Function<F, E> pFunction, Iterable<F> pIterable)
	{
		return new IterableApply<F, E>(pIterable, pFunction);
	}

	public static <F, E> Iterable<F> applyNestedIterables(
			Iterable<? extends Function<E, F>> pFunctions, Iterable<E> pIterable)
	{
		return new NestedIterable<E, F>(pIterable, pFunctions);
	}

	public static <A, B, C> Iterator<Function<A, C>> leftCombineFunctions(
			Function<A, B> pLeftFunction,
			Iterator<Function<B, C>> pRightFunctions)
	{
		return new LeftCombineFunctionIterator<A, B, C>(pLeftFunction,
				pRightFunctions);
	}

	public static <A, B, C> Iterator<Function<A, C>> rightCombineFunctions(
			Iterator<Function<A, B>> pLeftFunctions,
			Function<B, C> pRightFunction)
	{
		return new RightCombineFunctionIterator<A, B, C>(pRightFunction,
				pLeftFunctions);
	}

	private static class SupplierIterable<E> implements Iterable<E>
	{
		private final Supplier<E> mSupplier;
		private final int mLimit;

		private SupplierIterable(Supplier<E> pSupplier, int pLimit)
		{
			mSupplier = pSupplier;
			mLimit = pLimit;
		}

		@Override
		public Iterator<E> iterator()
		{
			return new SupplierIterator<E>(mSupplier, mLimit);
		}
	}

	private static class SingleIterator<E> implements Iterator<E>, Iterable<E>
	{
		private boolean mHasNext = true;
		private final E mElement;

		private SingleIterator(E pElement)
		{
			mElement = pElement;
		}

		@Override
		public boolean hasNext()
		{
			return mHasNext;
		}

		@Override
		public E next()
		{
			mHasNext = false;
			return mElement;
		}

		@Override
		public void remove()
		{
			throw new UnsupportedOperationException(
					"There is only one item, cannot remove");
		}

		@Override
		public Iterator<E> iterator()
		{
			return new SingleIterator<E>(mElement);
		}
	}

	private static class NestedIterable<E, T> implements Iterable<T>
	{
		private final Iterable<E> mIterable;
		private final Iterable<? extends Function<E, T>> mFunctions;

		private NestedIterable(Iterable<E> pIterable,
				Iterable<? extends Function<E, T>> pFunctions)
		{
			mIterable = pIterable;
			mFunctions = pFunctions;
		}

		@Override
		public Iterator<T> iterator()
		{
			return new NestedApply<T, E>(mFunctions.iterator(),
					new NestableIterator<E>(mIterable));
		}
	}

	private static class IterableApply<E, T> implements Iterable<T>
	{
		private final Iterable<E> mIterable;
		private final Function<E, T> mFunction;

		private IterableApply(Iterable<E> pIterable, Function<E, T> pFunction)
		{
			mIterable = pIterable;
			mFunction = pFunction;
		}

		@Override
		public Iterator<T> iterator()
		{
			return new IteratorApply<E, T>(mFunction, mIterable.iterator());
		}
	}

	private static class IteratorApply<E, T> implements Iterator<T>
	{
		private final Function<E, T> mFunction;
		private final Iterator<E> mIterator;

		public IteratorApply(Function<E, T> pFunction, Iterator<E> pIterator)
		{
			mFunction = pFunction;
			mIterator = pIterator;
		}

		@Override
		public boolean hasNext()
		{
			return mIterator.hasNext();
		}

		@Override
		public T next()
		{
			return mFunction.apply(mIterator.next());
		}

		@Override
		public void remove()
		{
			mIterator.remove();
		}
	}

	public static class NestableIterator<E> implements Iterator<E>
	{
		private final Iterable<E> mCollection;

		private Iterator<E> mCurrentIterator;

		private NestableIterator(Iterable<E> pCollection)
		{
			mCollection = pCollection;
			mCurrentIterator = pCollection.iterator();
		}

		@Override
		public boolean hasNext()
		{
			boolean vHasNext = mCurrentIterator.hasNext();
			if (!vHasNext)
			{
				mCurrentIterator = mCollection.iterator();
			}
			return vHasNext;
		}

		@Override
		public E next()
		{
			return mCurrentIterator.next();
		}

		@Override
		public void remove()
		{
			mCurrentIterator.remove();
		}
	}

	private static class NestedApply<E, T> implements Iterator<E>
	{
		private final Iterator<? extends Function<T, E>> mOuter;

		private NestableIterator<T> mInner;
		private Function<T, E> mCurrentElement;

		private NestedApply(Iterator<? extends Function<T, E>> pOuter,
				NestableIterator<T> pInnerFunctionIterator)
		{
			mOuter = pOuter;
			mCurrentElement = pOuter.next();
			mInner = pInnerFunctionIterator;
		}

		@Override
		public boolean hasNext()
		{
			boolean vHasNext = mInner.hasNext();
			if (!vHasNext)
			{
				vHasNext = mOuter.hasNext();
				if (vHasNext)
				{
					mCurrentElement = mOuter.next();
				}
			}
			return vHasNext;
		}

		@Override
		public E next()
		{
			return mCurrentElement.apply(mInner.next());
		}

		@Override
		public void remove()
		{
			throw new UnsupportedOperationException(
					"Cannot remove elements from a nested iterator");
		}
	}

	private static class LeftCombineFunctionIterator<A, B, C> implements
			Iterator<Function<A, C>>
	{
		private final Function<A, B> mLeftFunction;
		private final Iterator<Function<B, C>> mRightFunctions;

		private LeftCombineFunctionIterator(Function<A, B> pLeftFunction,
				Iterator<Function<B, C>> pRightFunctions)
		{
			mLeftFunction = pLeftFunction;
			mRightFunctions = pRightFunctions;
		}

		@Override
		public boolean hasNext()
		{
			return mRightFunctions.hasNext();
		}

		@Override
		public Function<A, C> next()
		{
			return FunctionUtil.combine(mLeftFunction, mRightFunctions.next());
		}

		@Override
		public void remove()
		{
			mRightFunctions.remove();
		}
	}

	private static class RightCombineFunctionIterator<A, B, C> implements
			Iterator<Function<A, C>>
	{
		private final Function<B, C> mRightFunction;
		private final Iterator<Function<A, B>> mLeftFunctions;

		private RightCombineFunctionIterator(Function<B, C> pRightFunction,
				Iterator<Function<A, B>> pLeftFunctions)
		{
			mRightFunction = pRightFunction;
			mLeftFunctions = pLeftFunctions;
		}

		@Override
		public boolean hasNext()
		{
			return mLeftFunctions.hasNext();
		}

		@Override
		public Function<A, C> next()
		{
			return FunctionUtil.combine(mLeftFunctions.next(), mRightFunction);
		}

		@Override
		public void remove()
		{
			mLeftFunctions.remove();
		}
	}

	private static class SupplierIterator<E> implements Iterator<E>
	{
		private final Supplier<E> mSupplier;
		private final int mLimit;

		private int mCount = 0;

		private SupplierIterator(Supplier<E> pSupplier, int pLimit)
		{
			mSupplier = pSupplier;
			mLimit = pLimit;
		}

		@Override
		public boolean hasNext()
		{
			return mCount < mLimit;
		}

		@Override
		public E next()
		{
			mCount++;
			return mSupplier.get();
		}

		@Override
		public void remove()
		{
			throw new UnsupportedOperationException(
					"Cannot remove elements from a SupplierIterator");

		}
	}
	
	private static class FileLineIterable implements Iterable<String>
	{
		private final File mFile;
		
		public FileLineIterable(File pFile)
		{
			mFile = pFile;
		}
		
		@Override
		public Iterator<String> iterator()
		{
			Iterator<String> vIterator;
			try
			{
				vIterator = new FileLineIterator(mFile);
			}
			catch(Exception e)
			{
				vIterator = null;
			}
			return vIterator;
		}
	}

	private static class FileLineIterator implements Iterator<String>
	{
		private final BufferedReader mReader;
		private String mCurrent = null;

		private FileLineIterator(File pFile) throws Exception
		{
			mReader = new BufferedReader(new FileReader(pFile));
			mCurrent = mReader.readLine();
		}

		@Override
		public boolean hasNext()
		{
			boolean vHasNext = mCurrent != null;
			if (!vHasNext)
			{
				try
				{
					mReader.close();
				}
				catch (Exception e)
				{

				}
			}
			return vHasNext;
		}

		@Override
		public String next()
		{
			String vReturn = mCurrent;
			try
			{
				mCurrent = mReader.readLine();
			}
			catch (Exception e)
			{
				System.err.print(e.getMessage());
				mCurrent = null;
			}
			return vReturn;
		}

		@Override
		public void remove()
		{
			throw new UnsupportedOperationException("Cannot remove element.");
		}
	}
}
